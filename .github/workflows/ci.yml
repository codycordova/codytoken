name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  RUST_VERSION: '1.70'

jobs:
  # Frontend CI
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Type check
      run: npx tsc --noEmit
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: .next/
        retention-days: 7

  # Smart Contract CI
  contracts-ci:
    name: Smart Contracts CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build contracts
      run: |
        cd contracts
        cargo build --verbose
        
    - name: Run contract tests
      run: |
        cd contracts
        cargo test --verbose
        
    - name: Run contract clippy
      run: |
        cd contracts
        cargo clippy -- -D warnings

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # E2E Tests (if applicable)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-ci, contracts-ci]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: .next/
        
    - name: Start application
      run: npm start &
      
    - name: Wait for app to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        
    - name: Run E2E tests
      run: |
        # Add your E2E test commands here
        echo "E2E tests would run here"
        # Example: npm run test:e2e

  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-ci, contracts-ci, security-audit]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Deploy to staging
      run: |
        # Add your staging deployment commands here
        echo "Deploying to staging environment"
        # Example: fly deploy --config fly.staging.toml

  # Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-ci, contracts-ci, security-audit, e2e-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Deploy to production
      run: |
        # Add your production deployment commands here
        echo "Deploying to production environment"
        # Example: fly deploy --config fly.toml

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [frontend-ci, contracts-ci, security-audit]
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "One or more CI jobs failed"
        # Add your notification logic here (Slack, Discord, email, etc.)
        # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"CI/CD pipeline failed"}' $SLACK_WEBHOOK_URL 